#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";

int64_t sq_distance(int64_t x1, int64_t y1, int64_t x2, int64_t y2) {
    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
}


bool solve(const std::vector<int64_t>& X, const std::vector<int64_t>& Y) {
    
    
    
    
    // 隣接する辺の内積が0であるかをチェックし、辺の長さが全て等しいかをチェックする
    for (int i = 0; i < 4; ++i) {
        int ni = (i + 1) % 4;
        int pi = (i + 3) % 4;
        if ((X[i] - X[pi]) * (X[ni] - X[i]) + (Y[i] - Y[pi]) * (Y[ni] - Y[i]) != 0)
            return false; // 内積が0でない場合は直角ではない
        if (sq_distance(X[i], Y[i], X[ni], Y[ni]) != sq_distance(X[i], Y[i], X[pi], Y[pi]))
            return false; // 辺の長さが異なる場合は正方形ではない
    }
    return true;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    // failed to analyze input format
    // TODO: edit here
    std::vector<int64_t> X(4);
    std::vector<int64_t> Y(4);
    REP (i, 4) {
        std::cin >> X[i] >> Y[i];
    }
    auto ans = solve(X,Y);
    std::cout << (ans ? YES : NO) << '\n';
    return 0;
}
