#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


int64_t solve(int N, const vector<pair<int64_t, int64_t>>& C) {
    int64_t cnt = 0;
    REP(i, N) {
        REP3(j, i + 1, N) { // 重複のないペアを選ぶために i + 1 から開始
            REP3(k, j + 1, N) { // 重複のないペアを選ぶために j + 1 から開始
                // 3点が同一直線上にあるかどうかを判定する
                if (C[i].first == C[j].first && C[i].first == C[k].first) // x 座標が全て同じ場合は同一直線上にあるとみなす
                    continue;
                if ((C[i].second - C[j].second) * (C[i].first - C[k].first) == (C[i].second - C[k].second) * (C[i].first - C[j].first))
                    continue;
                cnt++;
            }
        }
    }
    return cnt;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    vector<pair<int64_t, int64_t>> C(N);
    REP (i, N) {
        int64_t x, y;
        cin >> x >> y;
        C[i] = make_pair(x, y);
    }
    auto ans = solve(N, C);
    std::cout << ans << '\n';
    return 0;
}
