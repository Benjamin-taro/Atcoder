#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric> // for std::accumulate

#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


std::vector<int64_t> solve(int N, const std::vector<int64_t> &A) {
    std::vector<int64_t> ans(N);
    REP (i, N) {
        ans[i] = std::accumulate(A.begin(), A.end(), 0LL,
            [&A, i](int64_t acc, int64_t num) {
                return num > A[i] ? acc + num : acc;
            });
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP (i, N) {
        std::cin >> A[i];
    }
    auto ans = solve(N, A);
    REP (i, (int)ans.size()) {
        std::cout << ans[i] << ' ';
    }
    std::cout << '\n';
    return 0;
}
