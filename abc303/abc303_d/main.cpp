#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


int64_t solve(int64_t X, int64_t Y, int64_t Z, std::string S) {
    int64_t n = S.size();
    vector<vector<int64_t>> dp(n+1, vector<int64_t>(2, 0));
    dp[0][0] = 0;
    dp[0][1] = 0;
    for(int i = 0; i < n; i++) {
        if(i == 0){
            if(S[i] == 'A'){
                dp[i+1][0] += Z+X;
                dp[i+1][1] += Y; 
            }
            else{
                dp[i+1][0] += Z+Y;
                dp[i+1][1] += X;  
            }
        }
        else{
            if(S[i] == 'A'){
                dp[i+1][0] += min(dp[i][0]+X, dp[i][1]+Z+X);
                dp[i+1][1] += min(dp[i][0]+Z+Y, dp[i][1]+Y);
            }
            else{
                dp[i+1][0] += min(dp[i][0]+Y, dp[i][1]+Z+Y);
                dp[i+1][1] += min(dp[i][0]+Z+X, dp[i][1]+X);
            }
        }

    }
    return min(dp[n][0], dp[n][1]);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t X, Y, Z;
    std::string S;
    std::cin >> X >> Y >> Z >> S;
    auto ans = solve(X, Y, Z, S);
    std::cout << ans << '\n';
    return 0;
}
