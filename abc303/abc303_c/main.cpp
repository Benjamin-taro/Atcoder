#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";


auto solve(int64_t N, int M, int64_t H, int64_t K, std::string S, std::set<pair<int64_t, int64_t>> Heal) {
    int64_t xp=0, yp=0;
    for(int64_t i = 0; i<N; ++i){
        if(S[i] == 'R') xp++;
        if(S[i] == 'L') xp--;
        if(S[i] == 'U') yp++;
        if(S[i] == 'D') yp--;
        H--;
        if(H<0){
            cout << NO << endl;
            return 0;
        }
        if(Heal.count(pair(xp, yp))){
            if(H<K){
                H = K;
                Heal.erase(pair(xp, yp));
            }
        }
    }
    cout << YES << endl;
    return 0;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    int64_t H, K;
    std::string S;
    std::cin >> N >> M;
    std::set<pair<int64_t, int64_t>> Heal;
    std::cin >> H >> K >> S;
    for (int i = 0; i < M; ++i) {
        int64_t a, b;
        cin >> a >> b; // ペアを入力として受け取る
        Heal.emplace(a, b);
    }
    auto ans = solve(N, M, H, K, S, Heal);
    return 0;
}
