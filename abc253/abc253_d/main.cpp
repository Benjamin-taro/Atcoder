#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


int64_t gcd(int64_t a, int64_t b) {
    while (b != 0) {
        int64_t t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int64_t solve(int64_t N, int64_t A, int64_t B) {
    int64_t total_sum;
    int64_t sum_a, sum_b, sum_ab;
    total_sum = N * (1+N)/2;
    int64_t na;
    na = N/A;
    sum_a = na * (A+na*A) / 2;
    //cout << sum_a << endl;
    int64_t nb;
    nb = N/B;
    sum_b = nb * (B+nb*B) / 2;
    //cout << sum_b << endl;
    int64_t LCM = lcm(A, B);
    sum_ab = (N / LCM) * (LCM + (N / LCM) * LCM) / 2;
    return total_sum - sum_a - sum_b + sum_ab;


}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, A, B;
    std::cin >> N >> A >> B;
    auto ans = solve(N, A, B);
    std::cout << ans << endl;
    return 0;
}
