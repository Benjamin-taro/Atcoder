#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


auto solve(int N, vector<int64_t>& b, vector<vector<int64_t>>& c, int64_t d) {
    vector<int64_t> temp(N+1);
    temp[0] = 100;
    for(int i=0; i < N; i++){
        if(std::find(c[i].begin(), c[i].end(), d) != c[i].end()){
            temp[i+1] = b[i];
        }
        else{
            temp[i+1] = 100;
        }
    }

    // 最小値の要素へのイテレータを取得
    auto minIt = std::min_element(temp.begin(), temp.end());
    int minValue = *minIt; // 最小値を取得
    if (minValue == 100){
        minValue = 0;
    }
    std::vector<int> minIndices;

    // 全要素を調べ、最小値と等しい値のインデックスを保存
    for (auto it = temp.begin(); it != temp.end(); ++it) {
        if (*it == minValue) {
            minIndices.push_back(std::distance(temp.begin(), it));
        }
    }

    //cout << minValue << endl;

    //for (int index : minIndices) {
    //    cout << index << " " << endl;
    //}
    

    
    return minIndices;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    int N;
    cin >> N;
    vector<int64_t> b(N);
    vector<vector<int64_t>> c(N);
    
    for (int i = 0; i < N; ++i) {
        cin >> b[i];
        c[i] = vector<int64_t>(b[i]); // 各i番目のベクターのサイズをb[i]に設定
        for (int j = 0; j < b[i]; ++j) {
            cin >> c[i][j];
        }
    }


    int64_t d;
    std::cin >> d;
    auto ans = solve(N, b, c, d);
    cout << ans.size() << endl;
    for (int index : ans) {
        cout << index << " ";
    }
    std::cout << '\n';


    return 0;
}
