#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


auto solve(int N, int M, const std::vector<int64_t> &a, const std::vector<int64_t> &b, const std::vector<int64_t> &c, const std::vector<int64_t> &d) {
    // TODO: edit here
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M;
    std::cin >> N;
    std::cin >> M;
    vector<pair<int64_t, int64_t>> A(N);
    vector<pair<int64_t, int64_t>> B(M);
    REP (i, N) {
        int64_t a,b;
        std::cin >> a >> b;
        A[i] = pair(a,b);
    }
    REP (i, M) {
        int64_t c,d;
        std::cin >> c >> d;
        B[i] = pair(c,d);
    }

    REP(i, N) {
        int64_t min_dist = LLONG_MAX;
        int closest_index = -1;
        REP(j, M) {
            int64_t current_dist = abs(A[i].first - B[j].first) + abs(A[i].second - B[j].second);
            if (current_dist < min_dist) {
                min_dist = current_dist;
                closest_index = j;
            }
        }
        // インデックスは1から始まると仮定して、1を足す
        cout << closest_index + 1 << '\n';
    }


    return 0;
}
