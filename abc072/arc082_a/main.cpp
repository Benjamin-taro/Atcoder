#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


int64_t solve(int N, std::vector<int64_t> &a) {
    
    std::map<int64_t, std::vector<int64_t>> resultMap;    
    std::vector<int64_t> adjustedVec;
    for(int64_t i=0; i<N; i++){
        adjustedVec.push_back(a[i]+1);
        adjustedVec.push_back(a[i]);
        adjustedVec.push_back(a[i]-1);
    }
    std::unordered_map<int64_t, int64_t> counts;
    for (int value : adjustedVec) {
        counts[value]++;
    }
    auto mostFrequent = std::max_element(counts.begin(), counts.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
    });


    return mostFrequent->second;

}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> a(N);
    REP (i, N) {
        std::cin >> a[i];
    }
    auto ans = solve(N, a);
    std::cout << ans << endl;
    return 0;
}
