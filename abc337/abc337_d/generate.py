#!/usr/bin/env python3
# usage: $ oj generate-input 'python3 generate.py'
# usage: $ oj generate-input --hack-actual=./a.out --hack-expected=./naive 'python3 generate.py'
import random


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    def generate_input():
        # Determine the values for H and W such that H * W <= 2 * 10^5
        # This is a simplistic approach to ensure that we don't exceed the constraint.
        # A more sophisticated approach might be required for larger numbers.
        H = random.randint(1, 447)  # sqrt(2*10^5) is approximately 447
        W = random.randint(1, min(447, 2 * 10**5 // H))
        # K must be less than or equal to max(H, W)
        K = random.randint(1, max(H, W))

        # Initialize the grid
        grid = []
        
        # Populate the grid with '.' as placeholders
        for _ in range(H):
            row = ['.' for _ in range(W)]
            grid.append(row)
        
        # Randomly place 'o' and 'x' in the grid, ensuring 'o' is K times in the grid
        # and each 'o' is at least one cell away from any 'x'
        o_count = 0
        while o_count < K:
            i = random.randint(0, H - 1)
            j = random.randint(0, W - 1)
            if grid[i][j] == '.':
                grid[i][j] = 'o'
                o_count += 1
        
        # Now place 'x' in any position that is not 'o' and at least one cell away from 'o'
        for i in range(H):
            for j in range(W):
                if grid[i][j] == '.':
                    can_place_x = True
                    for di in range(-1, 2):
                        for dj in range(-1, 2):
                            if 0 <= i + di < H and 0 <= j + dj < W and grid[i + di][j + dj] == 'o':
                                can_place_x = False
                                break
                        if not can_place_x:
                            break
                    if can_place_x:
                        grid[i][j] = 'x' if random.random() < 0.5 else '.'  # Randomly decide to place 'x' or not
        
        # Convert the grid to the required string format
        input_strings = [''.join(row) for row in grid]
        
        # Return the formatted input
        return f"{H} {W} {K}\n" + "\n".join(input_strings)

    # Generate and print the input
    input_data = generate_input()
    print(input_data)
    
        
if __name__ == "__main__":
    main()
