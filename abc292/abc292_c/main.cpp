#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;


int countDivisors(int n) {
    int divisorCount = 0;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            // i が n の約数の場合
            if (i * i == n) {
                // i が n の平方根の場合、重複しないので1を追加
                divisorCount += 1;
            } else {
                // i と n/i が両方とも約数である場合、それぞれ2つの約数が存在する
                divisorCount += 2;
            }
        }
    }
    return divisorCount;
}

int64_t solve(int64_t N) {
    int64_t ans =0, temp = 0;
    for(int64_t i = 1; i <= N/2; i++){
        int64_t a, b;
        a = i; b=N-a;
        if(a == b){
            if(countDivisors(a)%2 == 1){
                temp += ((countDivisors(a)/2)*2 + 1);
            }
            else{
                temp += ((countDivisors(a)/2)*2);
            }
            cerr << temp << endl;
            if(countDivisors(b)%2 == 1){
                temp *= ((countDivisors(b)/2)*2 + 1);
            }
            else{
                temp *= ((countDivisors(b)/2)*2);
            }
            cerr << temp << endl;
            ans += temp;
        }
        else{
            if(countDivisors(a)%2 == 1){
                temp += ((countDivisors(a)/2)*2 + 1);
            }
            else{
                temp += ((countDivisors(a)/2)*2);
            }
            cerr << temp << endl;
            if(countDivisors(b)%2 == 1){
                temp *= ((countDivisors(b)/2)*2 + 1);
            }
            else{
                temp *= ((countDivisors(b)/2)*2);
            }
            cerr << temp << endl;
            ans += temp*2;
        }


        cerr << ans << endl;
        temp = 0;
    }
    return ans;

}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    std::cin >> N;




    auto ans = solve(N);
    std::cout << ans << '\n';
    return 0;
}
