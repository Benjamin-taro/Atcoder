#!/usr/bin/env python3
# usage: $ oj generate-input 'python3 generate.py'
# usage: $ oj generate-input --hack-actual=./a.out --hack-expected=./naive 'python3 generate.py'
import random

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    # Constraints
    MAX_N = 100
    MAX_Q = 100

    # Generate N
    N = random.randint(1, MAX_N)

    # Generate a permutation P of unique integers from 1 to N
    P = random.sample(range(1, N+1), N)

    # Generate Q
    Q = random.randint(1, MAX_Q)

    # Generate Q pairs of Ai and Bi such that 1 <= Ai < Bi <= N
    AB_pairs = []
    for _ in range(Q):
        A = random.randint(1, N-1)
        B = random.randint(A+1, N)
        AB_pairs.append((A, B))

    # Print the input in the specified format
    print(N)
    print(' '.join(map(str, P)))
    print(Q)
    for A, B in AB_pairs:
        print(A, B)


    '''
    N = random.randint(1, 1000)  # TODO: edit here
    P = [None for _ in range(N)]
    for i in range(N):
        P[i] = random.randint(1, 10 ** 9)  # TODO: edit here
    Q = random.randint(1, 1000)  # TODO: edit here
    A = [None for _ in range(Q)]
    B = [None for _ in range(Q)]
    for i in range(Q):
        A[i] = random.randint(1, 10 ** 9)  # TODO: edit here
        B[i] = random.randint(1, 10 ** 9)  # TODO: edit here
    print(N)
    print(*[P[i] for i in range(N)])
    print(Q)
    for i in range(Q):
        print(A[i], B[i])
    '''
if __name__ == "__main__":
    main()
