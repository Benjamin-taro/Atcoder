#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";
auto solve(int N, std::vector<int64_t> &A, int M, std::vector<int64_t> &B, int L, std::vector<int64_t> &C, int Q, std::vector<int64_t> &X) {
    std::vector<string> temp(Q);
    std::sort(A.begin(), A.end());
    std::sort(B.begin(), B.end());
    std::sort(C.begin(), C.end());  
    for (int64_t i = 0; i < Q; i++) {
        int64_t target = X[i];
        int64_t check = 0;
        for (int numa : A) {
            if (numa > target) {
                break;
            }
            else{
                for (int numb : B) {
                    if (numb > target - numa) {
                        break;
                    }
                    else{
                        for (int numc : C) {
                            if (numc > target - numa - numb) {
                                break;
                            }
                            else if (target == numa + numb + numc){
                                temp.push_back("Yes");
                                check = 1;
                                break;
                            }

                        }
                    }
                        
                }
            }
        }
        if(check == 0){
            temp.push_back("No");
        }
                    
    }


    return temp;
}




// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M, L, Q;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP (i, N) {
        std::cin >> A[i];
    }
    std::cin >> M;
    std::vector<int64_t> B(M);
    REP (i, M) {
        std::cin >> B[i];
    }
    std::cin >> L;
    std::vector<int64_t> C(L);
    REP (i, L) {
        std::cin >> C[i];
    }
    std::cin >> Q;
    std::vector<int64_t> X(Q);
    REP (i, Q) {
        std::cin >> X[i];
    }
    auto ans = solve(N, A, M, B, L, C, Q, X);
    REP (i, Q) {
        std::cout << ans[i] << '\n';
    }
    return 0;
}
