#!/usr/bin/env python3
# from typing import *



# def solve(a: str, b: str, c: str, d: str, e: List[str], f: List[str]) -> Tuple[str, List[str], List[str], str]:
def solve(N, Q, e, f):
    # dragonの初期化は、すべての部位が(1, 0)にあると仮定しています。
    dragon = [[i, 0] for i in range(1, N+1)]
    # headの初期座標
    x, y = 1, 0
    # headは常に最新の頭の座標のリスト
    head = [[x, y]]

    for q in range(Q):
        command_type = e[q]
        if command_type == "1":  # 動きのコマンド
            direction = f[q]
            if direction == "U":
                y += 1
            elif direction == "D":
                y -= 1
            elif direction == "R":
                x += 1
            elif direction == "L":
                x -= 1
            # 頭の座標を更新
            head = [[x, y]]
            # ドラゴンの体を更新。一番古い部位を除外し、新しい頭を追加。
            dragon = [head[0]] + dragon[:-1]

        else:  # 座標出力のコマンド
            index = int(f[q]) - 1  # f[q]を整数に変換し、0ベースのインデックスに調整
            if 0 <= index < len(dragon):
                # 指定された部位の座標を出力
                print(" ".join(map(str, dragon[index])))
            else:
                # インデックスが範囲外ならエラーメッセージを出力
                print("Error: Invalid part number")

            


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, Q = map(int, input().split())
    e = [None for _ in range(Q)] #motion
    f = [None for _ in range(Q)] #direction or point
    for i in range(Q):
        e[i], f[i] = input().split()
    solve(N, Q, e, f)
    #print(ans)
    '''
    for i in range(a):
        print(b[i])
        print(c[i], end=' ')
    print(d)
    '''
if __name__ == '__main__':
    main()
