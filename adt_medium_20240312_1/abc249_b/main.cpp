#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <cctype> // isupperとislower関数を使うために必要
#include <unordered_set>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";

bool hasUniqueChars(const std::string& str) {
    std::unordered_set<char> chars;
    
    for (char ch : str) {
        // 文字をセットに挿入し、既に存在しているか確認
        if (!chars.insert(ch).second) {
            // 挿入が失敗したら、文字は重複している
            return false;
        }
    }
    
    // すべての文字が一意である場合
    return true;
}
bool solve(std::string S) {
    int64_t u,l,d;
    u = 0;
    l = 0;
    d = 0;
    for(int64_t i=0; i < S.length(); i++){
        if (isupper(S[i])){
            u++;
        }
        if(islower(S[i])){
            l++;
        }

    }
    if(hasUniqueChars(S)){
        d++;
    }
    if(u>0 && l>0 && d>0){
        return true;
    }
    else{
        return false;
    }

    return false;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::string S;
    std::cin >> S;
    auto ans = solve(S);
    std::cout << (ans ? YES : NO) << '\n';
    return 0;
}
