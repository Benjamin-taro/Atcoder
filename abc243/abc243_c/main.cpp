#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <queue>
#include <array>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <deque>
#include <numeric>
#include <assert.h>
#include <unordered_map>
#include <type_traits> // For std::is_floating_point
#include <cmath> // For std::ceil
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;



// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::string S;
    std::cin >> N;
    std::vector<int64_t> X(N), Y(N);
    REP (i, N) {
        std::cin >> X[i] >> Y[i];
    }
    std::cin >> S;
    map<int64_t, vector<int64_t>> y_cord;
    REP(i, N){
        y_cord[Y[i]].push_back(i); //y座標をキーとして何番目の点なのかを値とする辞書を作成
    }
    for (auto p : y_cord) { //y座標ごとに処理を行う。
        vector<int64_t> ids = p.second;
        vector<pair<int64_t, char>> ps; //特定のy座標にあるpointに関してx座標を何番目の点なのかから取得すると移動の方向LRをペアで記録する 
        for (auto i : ids){
            ps.emplace_back(X[i], S[i]);
        }
        sort(ps.begin(), ps.end()); //x座標の順番にソートする
        int64_t len = ps.size();
        REP(i, len-1){
            if(ps[i].second == 'R' && ps[i+1].second == 'L'){
                cout << "Yes" << endl;
                return 0;
            }
        }
    }
    cout << "No" << endl;
    return 0;
}
